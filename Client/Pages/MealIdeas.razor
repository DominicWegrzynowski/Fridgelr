@page "/mealideas"
@using Fridgelr.Shared
@using System.Text.Json
@using static System.Net.WebRequestMethods
@inject NavigationManager navigationManager
@inject HttpClient httpClient


@if(loaded == true)
{
    <div class="container">
        <h3 class="mt-5">Pick a Meal</h3>
        <div class="list-group">
            @foreach (var idea in ideas)
            {
                <button class="list-group-item list-group-item-action list-group-item-success p-2">
                    <div class="d-flex w-100 justify-content-between">
                        <h2 class="mb-1 fw-bold">@idea.Title</h2>
                    </div>
                    <p class="mb-1">@idea.Description</p>
                    
                </button>
            }
        </div>
    </div>
}
else
{
    <div class="container">
         <p>Loading...</p>
    </div>
}

@code {
    [CascadingParameter]
    private RecipeState rState { get; set; }
    private List<Idea> ideas = new List<Idea>();
    private bool loaded = false;
    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
    };

    protected override void OnInitialized()
    {
        if(rState is null)
        {
            navigationManager.NavigateTo("/", forceLoad: true);
            return;
        }

        if(rState.Ideas.Count < 1)
        {
            GetIdeas();
        }
        else
        {
            loaded = true;
            ideas = rState.Ideas;
            StateHasChanged();
        }
    }

    private async void GetIdeas()
    {
        string baseuri = "Recipe/GetRecipeIdeas";
        loaded = false;

        RecipeParms recipeParms = new RecipeParms()
        {
            MealTime = rState.MealTime,
            Ingredients = rState.Ingredients
        };

        try
        {
            HttpResponseMessage response = await httpClient.PostAsJsonAsync(baseuri, recipeParms, _jsonOptions);
            response.EnsureSuccessStatusCode();
            ideas = (await response.Content.ReadFromJsonAsync<List<Idea>>())!;
            rState.Ideas = ideas;
            loaded = true;
            StateHasChanged();
        }
        catch (Exception)
        {
            Console.WriteLine("Error: Could not fetch recipe ideas");
            throw;
        }
    }
}
